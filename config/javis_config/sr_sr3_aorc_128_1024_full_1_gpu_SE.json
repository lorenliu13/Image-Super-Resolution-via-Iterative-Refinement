{
    "name": "sr_aorc_128_1024",
    "phase": "train", // train or val
    "gpu_ids": [
        0
    ],
    "path": { //set the path
        "log": "logs",
        "tb_logger": "tb_logger", //
        "results": "results", // where the model will save the results
        "checkpoint": "checkpoint", // where model saves the check point
        "resume_state": null
        // Set up pre-trained model
        // "resume_state": "J:/Mississippi_design_storm/Super_resolution/SR_diffusion/pre_train_model/16_128_ffhq_celebahq/16_128_ffhq_celebahq" //pretrain model or training state
    },
    "datasets": {
        "train": {
            "name": "aorc_128_1024",
            "mode": "HR", // whether need LR img
            "dataroot": "aorc_128_1024_small/aorc_128_1024_train", // Using the absolute path
            "datatype": "npy", //lmdb or img, path of img files
            "l_resolution": 128, // low resolution need to super_resolution
            "r_resolution": 1024, // high resolution
            "batch_size": 1, // set batch size as 64, number of samples to be processed at the same time
            "num_workers": 8, // set how many workers for data loading
            "use_shuffle": true, // whether the dataset should be randomly shuffled before being processed
            "data_len": -1 // -1 represents all data used in train
        },
        "val": {
            "name": "aorc_128_1024",
            "mode": "LRHR",
            "dataroot": "aorc_128_1024_small/aorc_128_1024_test", // Using the absolute path
            "datatype": "npy", //lmdb or img, path of img files
            "l_resolution": 128,
            "r_resolution": 1024,
            "data_len": -1 // data length in validation (for training phase, only 3 will be used)
        }
    },
    "model": {
        "which_model_G": "sr3", // use the ddpm or sr3 network structure
        "finetune_norm": false,
        "unet": {
            "in_channel": 2,
            "out_channel": 1,
            "inner_channel": 64,
            "channel_multiplier": [
                1,
                2,
                4,
                8,
                16,
                32,
                32,
                32
            ],
            "attn_res": [
                16
            ],
            "res_blocks": 2,
            "dropout": 0.2
        },
        "beta_schedule": { // use munual beta_schedule for acceleration
            "train": {
                "schedule": "linear",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            },
            "val": {
                "schedule": "linear",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            }
        },
        "diffusion": {
            "image_size": 1024,
            "channels": 1, //sample channel
            "conditional": true // unconditional generation or unconditional generation(super_resolution)
        }
    },
    "train": {
        "n_iter": 1000000, // one million steps
        "val_freq": 1e4, // every 50000 steps do a validation
        "save_checkpoint_freq": 5e4, // every 100,000 steps save a model
        "print_freq": 200, // between 1e-3 and 1e-4
        "optimizer": {
            "type": "adam",
            "lr": 1e-4
        },
        "ema_scheduler": { // not used now
            "step_start_ema": 5000,
            "update_ema_every": 1,
            "ema_decay": 0.9999
        }
    },
    "wandb": {
        "project": "sr_ffhq"
    }
}